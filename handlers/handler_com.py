# —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞—Å-–±–∞—Ç—å–∫–æ
from handlers.handler import Handler
from settings import config  # Correct import statement
from telebot.types import ReplyKeyboardMarkup, KeyboardButton


class HandlerCommands(Handler):
    """
    –ö–ª–∞—Å –æ–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /help —Ç–æ—â–æ.
    """
    def __init__(self, bot):
        super().__init__(bot)
        self.user_data = {}

    def pressed_btn_start(self, message):
        """
        –æ–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ /start –∫–æ–º–∞–Ω–¥–∏
        """
        self.bot.send_message(message.chat.id,
                              f'{message.from_user.first_name},'
                              f' –ü—Ä–∏–≤—ñ—Ç! –ö–∞–∂–∏, —â–æ —Ä–æ–±–∏—Ç–∏!',
                              reply_markup=self.keybords.start_menu())

    def pressed_btn_choose_goods(self, message):
        """
        –æ–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä"
        """
        self.bot.send_message(message.chat.id,
                              '–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É:',
                              reply_markup=self.keybords.category_menu())

    def request_phone_number(self, message):
        """
        –ó–∞–ø–∏—Ç—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        button = KeyboardButton('–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', request_contact=True)
        markup.add(button)
        self.bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:', reply_markup=markup)

    def request_delivery_city(self, message):
        """
        –ó–∞–ø–∏—Ç—É—î –º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        self.bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:')

    def request_delivery_service(self, message):
        """
        –ó–∞–ø–∏—Ç—É—î –ø–æ—à—Ç–æ–≤—É —Å–ª—É–∂–±—É —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('–ù–æ–≤–∞ –ü–æ—à—Ç–∞', '–£–∫—Ä –ü–æ—à—Ç–∞')
        self.bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—à—Ç–æ–≤—É —Å–ª—É–∂–±—É:', reply_markup=markup)

    def request_branch(self, message):
        """
        –ó–∞–ø–∏—Ç—É—î –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—à—Ç–æ–≤–æ—ó —Å–ª—É–∂–±–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        self.bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:')

    def request_payment_method(self, message):
        """
        –ó–∞–ø–∏—Ç—É—î —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        """
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('–ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ (–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 200 –≥—Ä–Ω)', '–ü–æ–≤–Ω–∞ –æ–ø–ª–∞—Ç–∞')
        self.bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:', reply_markup=markup)

    def handle_contact(self, message):
        """
        –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        """
        self.user_data[message.chat.id]['phone_number'] = message.contact.phone_number
        self.request_delivery_city(message)

    def handle_city(self, message):
        """
        –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        """
        self.user_data[message.chat.id]['delivery_city'] = message.text
        self.request_delivery_service(message)

    def handle_delivery_service(self, message):
        """
        –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—à—Ç–æ–≤–æ—ó —Å–ª—É–∂–±–∏
        """
        self.user_data[message.chat.id]['delivery_service'] = message.text
        self.request_branch(message)

    def handle_branch(self, message):
        """
        –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è
        """
        self.user_data[message.chat.id]['branch'] = message.text
        self.request_payment_method(message)

    def handle_payment_method(self, message):
        """
        –û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç–∏
        """
        self.user_data[message.chat.id]['payment_method'] = message.text
        self.confirm_order(message)

    def confirm_order(self, message):
        """
        –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –∞–¥–º—ñ–Ω—É
        """
        user_data = self.user_data[message.chat.id]
        order_details = (
            f"–î–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user_data['phone_number']}\n"
            f"–ú—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_city']}\n"
            f"–ü–æ—à—Ç–æ–≤–∞ —Å–ª—É–∂–±–∞: {user_data['delivery_service']}\n"
            f"–ù–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {user_data['branch']}\n"
            f"–°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {user_data['payment_method']}\n"
        )
        admin_chat_id = config.ADMIN_CHAT_ID

        # Send order confirmation to user
        self.bot.send_message(message.chat.id,
                              '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!',
                              reply_markup=self.keybords.start_menu())

        # Send order details to admin
        self.bot.send_message(admin_chat_id,
                              f'–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.first_name}:\n{order_details}')

        # Remove the order from the "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è" section
        self.user_data.pop(message.chat.id, None)

    def handle(self):
        # –æ–±—Ä–æ–±–Ω–∏–∫(–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å,
        # —è–∫–∏–π –æ–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ /start –∫–æ–º–∞–Ω–¥–∏
        @self.bot.message_handler(commands=['start'])
        def handle(message):
            if message.text == '/start':
                self.pressed_btn_start(message)
        
        @self.bot.message_handler(func=lambda message: message.text == 'üìÇ –í–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä')
        def handle_choose_goods(message):
            self.pressed_btn_choose_goods(message)
        
        @self.bot.message_handler(func=lambda message: message.text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–∞–º–æ–≤–ª–µ–Ω–Ω—è')
        def handle_order(message):
            self.user_data[message.chat.id] = {}
            self.request_phone_number(message)
        
        @self.bot.message_handler(content_types=['contact'])
        def handle_contact(message):
            self.handle_contact(message)
        
        @self.bot.message_handler(func=lambda message: message.chat.id in self.user_data and 'phone_number' in self.user_data[message.chat.id] and 'delivery_city' not in self.user_data[message.chat.id])
        def handle_city(message):
            self.handle_city(message)
        
        @self.bot.message_handler(func=lambda message: message.chat.id in self.user_data and 'delivery_city' in self.user_data[message.chat.id] and 'delivery_service' not in self.user_data[message.chat.id])
        def handle_delivery_service(message):
            self.handle_delivery_service(message)
        
        @self.bot.message_handler(func=lambda message: message.chat.id in self.user_data and 'delivery_service' in self.user_data[message.chat.id] and 'branch' not in self.user_data[message.chat.id])
        def handle_branch(message):
            self.handle_branch(message)
        
        @self.bot.message_handler(func=lambda message: message.chat.id in self.user_data and 'branch' in self.user_data[message.chat.id] and 'payment_method' not in self.user_data[message.chat.id])
        def handle_payment_method(message):
            self.handle_payment_method(message)
